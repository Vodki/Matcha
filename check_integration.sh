#!/bin/bash

# Script de v√©rification de l'int√©gration Backend-Frontend
# Ce script teste que les services sont correctement d√©marr√©s et communiquent

echo "üîç V√©rification de l'int√©gration Matcha Backend-Frontend"
echo "========================================================="
echo ""

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction de v√©rification
check() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úì${NC} $1"
        return 0
    else
        echo -e "${RED}‚úó${NC} $1"
        return 1
    fi
}

# 1. V√©rifier que Docker est install√©
echo "1. V√©rification de Docker..."
docker --version > /dev/null 2>&1
check "Docker est install√©"
echo ""

# 2. V√©rifier que les conteneurs sont en cours d'ex√©cution
echo "2. V√©rification des conteneurs..."
docker ps | grep -q "matcha_backend"
check "Backend (matcha_backend) est en cours d'ex√©cution"

docker ps | grep -q "matcha_frontend"
check "Frontend (matcha_frontend) est en cours d'ex√©cution"

docker ps | grep -q "matcha_db"
check "Base de donn√©es (matcha_db) est en cours d'ex√©cution"
echo ""

# 3. V√©rifier que le backend r√©pond
echo "3. V√©rification de l'API Backend..."
response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/auth/verify?token=test)
if [ "$response" == "400" ] || [ "$response" == "200" ]; then
    echo -e "${GREEN}‚úì${NC} Backend r√©pond sur le port 8080 (HTTP $response)"
else
    echo -e "${RED}‚úó${NC} Backend ne r√©pond pas correctement (HTTP $response)"
fi
echo ""

# 4. V√©rifier que le frontend r√©pond
echo "4. V√©rification du Frontend..."
response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
if [ "$response" == "200" ]; then
    echo -e "${GREEN}‚úì${NC} Frontend r√©pond sur le port 3000"
else
    echo -e "${RED}‚úó${NC} Frontend ne r√©pond pas correctement (HTTP $response)"
fi
echo ""

# 5. V√©rifier que la base de donn√©es est accessible
echo "5. V√©rification de la base de donn√©es..."
docker exec matcha_db pg_isready -U matcha > /dev/null 2>&1
check "PostgreSQL est pr√™t"
echo ""

# 6. Test d'inscription (optionnel)
echo "6. Test d'inscription (optionnel)..."
echo -e "${YELLOW}‚Ñπ${NC} Pour tester l'inscription, ex√©cutez:"
echo "   curl -X POST http://localhost:8080/auth/register \\"
echo "     -H \"Content-Type: application/x-www-form-urlencoded\" \\"
echo "     -d \"username=testuser&password=Test1234&email=test@test.com&first_name=Test&last_name=User\""
echo ""

# 7. R√©sum√©
echo "========================================================="
echo "üìä R√©sum√©"
echo "========================================================="
echo ""
echo "Services disponibles:"
echo "  - Frontend:  http://localhost:3000"
echo "  - Backend:   http://localhost:8080"
echo "  - Database:  localhost:5432"
echo ""
echo "Documentation:"
echo "  - README_API_INTEGRATION.md   - Guide complet"
echo "  - README_TESTING.md           - Tests et d√©bogage"
echo "  - README_IMPLEMENTATION.md    - R√©sum√© de l'impl√©mentation"
echo ""
echo "Logs:"
echo "  - Backend:   docker logs matcha_backend"
echo "  - Frontend:  docker logs matcha_frontend"
echo "  - Database:  docker logs matcha_db"
echo ""
echo -e "${GREEN}‚úì${NC} V√©rification termin√©e!"
